/*
 * holeblock.cpp
 *
 *  Created on: Jun 10, 2010
 *      Author: thery
 */
#include "holeblock.h"

#include <map>
#include <string>
#include <cassert>
#include <stdio.h>
#include <string.h>
#include <libxml/encoding.h>
#include <libxml/xmlwriter.h>
#include <libxml/parser.h>

#include <iostream>
#include <sstream>
#include <fstream>


HoleBlockRef::HoleBlockRef():
m_nbfree(0),m_nbref(0),m_nb(0)
{
	m_tableFree = new uint[_BLOCKSIZE_];
	m_used = new char[_BLOCKSIZE_];
}

HoleBlockRef::~HoleBlockRef()
{
	delete[] m_tableFree;
	delete[] m_used;
}

void HoleBlockRef::swap(HoleBlockRef& hb)
{
	unsigned int temp = m_nbfree;
	m_nbfree = hb.m_nbfree;
	hb.m_nbfree= temp;

	temp = m_nbref;
	m_nbref = hb.m_nbref;
	hb.m_nbused= temp;

	temp = m_nb;
	m_nb = hb.m_nb;
	hb.m_nb= temp;

	uint* ptr = m_tableFree;
	m_tableFree = hb.m_tableFree;
	hb.m_tableFree=ptr;

	char* ptr2 = m_used;
	m_used = hb.m_used;
	hb.m_used=ptr;
}



unsigned int HoleBlockRef::newElt(unsigned int& nbEltsMax)
{
	// no hole then add a line at the end of block
	if (m_nbfree==0)
	{
 		unsigned int nbElts = m_nbref;
		m_used[m_nbused++] = 1;
		m_nb++;
		nbEltsMax++;
		return nbElts;
	}

	unsigned int index = m_tableFree[--m_nbfree];
	m_refused[index]=1;
	m_nb++;
	return index;
}




void HoleBlockRef::removeElt(unsigned int idx)
{
	m_nb--;

	m_tableFree[m_nbfree++]=idx;
	m_used[idx] = 0;
}



bool  HoleBlockRef::compressFree()
{
	if (m_nb)
	{

		m_nbfree=0;
		m_nbused = m_nb;
		return false;
	}
	return true;
}


void HoleBlockRef::overwrite(int i, HoleBlockRef *bf, int j)
{
	m_used[i] = bf->m_used[j];
	bf->m_used[j] = 0;

	incNb();
	bf->decNb();
}



void HoleBlockRef::clear()
{
	m_nb = 0;
	m_nbfree = 0;
	m_nbused = 0;
}



bool HoleBlockRef::updateHoles(unsigned int nb)
{
	m_nbfree=0;
	m_nbused = nb;
	bool notfull=false;
	for (unsigned int i=0; i<nb; ++i)
	{
		if (m_used[i]==0)
		{
			m_tableFree[m_nbfree++] = i;
			notfull=true;
		}
	}
	return notfull;
}



void HoleBlockRef::saveBin(std::ofstream& fs)
{
	std::cout << "save bf "<< m_nb<< " / "<< m_nbref<< " / "<< m_nbfree << std::endl;

	// on sauve les trois nombres;
	uint numbers[3];
	numbers[0] = m_nb;
	numbers[1] = m_nbref;
	numbers[2] = m_nbfree;
	fs.write(reinterpret_cast<const char*>(numbers), 3*sizeof(uint) );

	// sauve les ref count
	fs.write(reinterpret_cast<const char*>(m_used),m_nbused*sizeof(char));

	// sauve les free lines
	fs.write(reinterpret_cast<const char*>(m_tableFree),m_nbfree*sizeof(uint));
}

bool HoleBlockRef::loadBin(std::ifstream& fs)
{
	uint numbers[3];

	fs.read(reinterpret_cast<char*>(numbers),3*sizeof(uint));
	m_nb = numbers[0];
	m_nbref = numbers[1];
	m_nbfree = numbers[2];

//	std::cout << "load bf "<< m_nb<< " / "<< m_nbref<< " / "<< m_nbfree << std::endl;

	fs.read(reinterpret_cast<char*>(m_used),m_nbused*sizeof(char));

	fs.read(reinterpret_cast<char*>(m_tableFree),m_nbfree*sizeof(uint));

	return true;
}
